from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC
from sklearn.model_selection import GridSearchCV, train_test_split, StratifiedKFold
from sklearn.metrics import classification_report
from sklearn.decomposition import TruncatedSVD
from sklearn.linear_model import LogisticRegression
import pandas as pd
import ast

# Read the dataset
dataset = pd.read_csv('dataset/Dataset_cleaned.csv', nrows=50000)

# Preprocess the reviews (Assuming they are lists)
dataset['review'] = dataset['review'].apply(ast.literal_eval)

# Define features and labels
texts = dataset["review"]
labels = dataset["sentiment"]

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(texts, labels, test_size=0.2, random_state=42)

def identity_tokenizer(tokens):
    # Tokenize and remove tokens that are too short
    return [token for token in tokens if len(token) > 2]

# Pipeline with TF-IDF, TruncatedSVD, and Logistic Regression (can try LinearSVC too)
pipeline = Pipeline([
    ('tfidf', TfidfVectorizer(tokenizer=identity_tokenizer, token_pattern=None, lowercase=False, max_features=10000, max_df=0.95, min_df=2)), 
    ('svd', TruncatedSVD(n_components=500)),  # Optional: Dimensionality reduction
    ('clf', LogisticRegression(class_weight='balanced', solver='liblinear'))  # Logistic Regression with class weighting
])

# Define the parameter grid
param_grid = {
    'tfidf__max_features': [15000],
    'svd__n_components': [300, 500, 800],  # Adjusted for TruncatedSVD
    'clf__C': [0.1, 1],  # Regularization strength for LogisticRegression
    'tfidf__max_df': [0.85, 0.9, 0.95],
    'tfidf__min_df': [1, 2, 3],
}

# GridSearchCV with StratifiedKFold for better handling of class distribution
grid_search = GridSearchCV(pipeline, param_grid, cv=StratifiedKFold(n_splits=5), scoring='accuracy', verbose=3, n_jobs=3)
grid_search.fit(X_train, y_train)

# Print best parameters and validation accuracy
print("Meilleurs paramètres :", grid_search.best_params_)
print("Meilleure précision (validation) :", grid_search.best_score_)

# Final evaluation on the test set
y_pred = grid_search.best_estimator_.predict(X_test)
print(classification_report(y_test, y_pred))
